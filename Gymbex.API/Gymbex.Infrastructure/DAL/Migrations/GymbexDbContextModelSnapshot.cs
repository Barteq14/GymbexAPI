// <auto-generated />
using System;
using Gymbex.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gymbex.Infrastructure.DAL.Migrations
{
    [DbContext(typeof(GymbexDbContext))]
    partial class GymbexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gymbex.Core.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Activities", (string)null);
                });

            modelBuilder.Entity("Gymbex.Core.Entities.CategoryEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CategoriesEquipment", (string)null);
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryEquipmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EquipmentState")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryEquipmentId");

                    b.ToTable("Equipments", (string)null);
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reservations", (string)null);
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("KindDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Customer", b =>
                {
                    b.HasOne("Gymbex.Core.Entities.Ticket", null)
                        .WithMany("Customers")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Equipment", b =>
                {
                    b.HasOne("Gymbex.Core.Entities.CategoryEquipment", "CategoryEquipment")
                        .WithMany("Equipments")
                        .HasForeignKey("CategoryEquipmentId");

                    b.Navigation("CategoryEquipment");
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Reservation", b =>
                {
                    b.HasOne("Gymbex.Core.Entities.Activity", "Activity")
                        .WithMany("Reservations")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Gymbex.Core.Entities.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Activity");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Activity", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Gymbex.Core.Entities.CategoryEquipment", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Gymbex.Core.Entities.Ticket", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
